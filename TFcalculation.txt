import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
 





import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.Reducer;

public class Tf {
	public static class WordCountsForDocsMapper extends Mapper<LongWritable, Text, Text, Text> {
		 
	    public WordCountsForDocsMapper() {
	    }
	 
	    /**
	     * @param key is the byte offset of the current line in the file;
	     * @param value is the line from the file
	     * @param context
	     *
	     *     PRE-CONDITION: aa@leornardo-davinci-all.txt    1
	     *                    aaron@all-shakespeare   98
	     *                    ab@leornardo-davinci-all.txt    3
	     *
	     *     POST-CONDITION: Output <"all-shakespeare", "aaron=98"> pairs
	     */
	    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	        String[] wordAndDocCounter = value.toString().split("\t");
	        String[] wordAndDoc = wordAndDocCounter[0].split("@");
	        context.write(new Text(wordAndDoc[1]), new Text(wordAndDoc[0] + "=" + wordAndDocCounter[1]));
	    }
	}
	public static class WordCountsForDocsReducer extends Reducer<Text, Text, Text, Text> {
		 
	    public WordCountsForDocsReducer() {
	    }
	 
	    /**
	     * @param key is the key of the mapper
	     * @param values are all the values aggregated during the mapping phase
	     * @param context contains the context of the job run
	     *
	     *        PRE-CONDITION: receive a list of <document, ["word=n", "word-b=x"]>
	     *            pairs <"a.txt", ["word1=3", "word2=5", "word3=5"]>
	     *
	     *       POST-CONDITION: <"word1@a.txt, 3/13">,
	     *            <"word2@a.txt, 5/13">
	     */
	    public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
	        int sumOfWordsInDocument = 0;
	        Map<String, Integer> tempCounter = new HashMap<String, Integer>();
	        for (Text val : values) {
	        	//ArrayList<String> wordCounter=new ArrayList<String>();
	            String[] strwordCounter = val.toString().split("=");
	            List<String> wordCounter=Arrays.asList(strwordCounter);
	            tempCounter.put(wordCounter.get(0), Integer.valueOf(wordCounter.get(1)));
	        	//wordCounter=(ArrayList<String>) Arrays.asList(val.toString().split("="));
	            sumOfWordsInDocument += Integer.parseInt(wordCounter.get(1));
	        }
	        for (String wordKey : tempCounter.keySet()) {
	            context.write(new Text(wordKey + "@" + key.toString()), new Text(tempCounter.get(wordKey) + "/"
	                    + sumOfWordsInDocument));
	        }
	    }
	}
	
	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
		Configuration conf = new Configuration();
	    Job job = new Job(conf, "word count1");
	    job.setJarByClass(Tf.class);
	    job.setMapperClass(WordCountsForDocsMapper.class);
	    //job.setCombinerClass(WordCountsForDocsReducer.class);
	    job.setReducerClass(WordCountsForDocsReducer.class);
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(Text.class);
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    System.exit(job.waitForCompletion(true) ? 0 : 1);

	}

}
